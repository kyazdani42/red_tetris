// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing the component smoke tests the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    dispatchSetIsPlaying={[Function]}
    isPlaying={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <UNDEFINED
          onClick={[Function]}
        >
          <UNDEFINED
            className="audio-icon"
            src="/assets/iconplay.png"
          />
        </UNDEFINED>,
        <audio
          autoPlay={true}
          id="tetris-music"
          loop={true}
        >
          <source
            src="/assets/theme-tetris.mp3"
          />
        </audio>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <UNDEFINED
            className="audio-icon"
            src="/assets/iconplay.png"
          />,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "audio-icon",
            "src": "/assets/iconplay.png",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-dnqmqq",
              "isStatic": true,
              "rules": Array [
                "
  width: 20px;
  height: 20px;
  position: fixed;
  top: 25px;
  left: 25px;
  filter: invert(1);
",
              ],
            },
            "displayName": "styled.img",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-dnqmqq",
            "target": "img",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": true,
            "rules": Array [
              "
  width: 30px;
  height: 30px;
  line-height: 30px;
  border-radius: 0px;
  position: fixed;
  background-color: #000;
  border: 1px solid rgba(255,255,255,0.5);
  box-shadow: 0 10px 20px rgba(255,44,55,0.30);
  top: 20px;
  left: 20px;
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "autoPlay": true,
          "children": <source
            src="/assets/theme-tetris.mp3"
          />,
          "id": "tetris-music",
          "loop": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "/assets/theme-tetris.mp3",
          },
          "ref": null,
          "rendered": null,
          "type": "source",
        },
        "type": "audio",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <UNDEFINED
            onClick={[Function]}
          >
            <UNDEFINED
              className="audio-icon"
              src="/assets/iconplay.png"
            />
          </UNDEFINED>,
          <audio
            autoPlay={true}
            id="tetris-music"
            loop={true}
          >
            <source
              src="/assets/theme-tetris.mp3"
            />
          </audio>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <UNDEFINED
              className="audio-icon"
              src="/assets/iconplay.png"
            />,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "audio-icon",
              "src": "/assets/iconplay.png",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-dnqmqq",
                "isStatic": true,
                "rules": Array [
                  "
  width: 20px;
  height: 20px;
  position: fixed;
  top: 25px;
  left: 25px;
  filter: invert(1);
",
                ],
              },
              "displayName": "styled.img",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-dnqmqq",
              "target": "img",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": true,
              "rules": Array [
                "
  width: 30px;
  height: 30px;
  line-height: 30px;
  border-radius: 0px;
  position: fixed;
  background-color: #000;
  border: 1px solid rgba(255,255,255,0.5);
  box-shadow: 0 10px 20px rgba(255,44,55,0.30);
  top: 20px;
  left: 20px;
",
              ],
            },
            "displayName": "styled.button",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "button",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "autoPlay": true,
            "children": <source
              src="/assets/theme-tetris.mp3"
            />,
            "id": "tetris-music",
            "loop": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "src": "/assets/theme-tetris.mp3",
            },
            "ref": null,
            "rendered": null,
            "type": "source",
          },
          "type": "audio",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
